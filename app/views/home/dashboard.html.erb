<!-- Welcome Section -->
<div class="card shadow-medium mb-8">
  <div class="card-body">
    <div class="flex items-center justify-between">
      <div class="flex items-center space-x-4">
        <% if @user.image_url.present? %>
          <img src="<%= @user.image_url %>" alt="Profile" class="w-16 h-16 rounded-2xl shadow-soft">
        <% else %>
          <div class="w-16 h-16 bg-gradient-to-r from-primary-500 to-primary-600 rounded-2xl flex items-center justify-center shadow-soft">
            <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
            </svg>
          </div>
        <% end %>
        <div>
          <h1 class="text-2xl font-bold text-secondary-100 mb-1">Welcome back, <%= @user.name || @user.email %></h1>
          <p class="text-secondary-400">Track your fitness progress and manage your API integrations</p>
          <div class="flex items-center mt-2 text-sm text-secondary-400">
            <% if @user.oauth_user? %>
              <div class="flex items-center">
                <svg class="w-4 h-4 mr-1" viewBox="0 0 24 24">
                  <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                  <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                  <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                  <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                </svg>
                <span class="mr-3">Signed in with Google</span>
              </div>
            <% else %>
              <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
              </svg>
              <span class="mr-3">Email/Password login</span>
              <% if @user.provider.blank? %>
                <%= link_to "/auth/google_oauth2", method: :post, class: "text-primary-400 hover:text-primary-300 underline", data: { turbo_method: :post } do %>
                  Link Google Account
                <% end %>
              <% end %>
            <% end %>
          </div>
        </div>
      </div>
      <div class="hidden md:block">
        <div class="bg-gradient-to-r from-success-900/20 to-success-800/20 rounded-xl p-4 border border-success-800">
          <div class="flex items-center text-success-300">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <span class="text-sm font-medium">Dashboard Active</span>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- API Keys Section -->
<div class="card shadow-medium mb-8">
  <div class="card-header">
    <div class="flex justify-between items-center">
      <div>
        <h2 class="text-xl font-semibold text-secondary-100">API Key Management</h2>
        <p class="text-sm text-secondary-400 mt-1">Manage your API keys for secure access to the fitness platform</p>
      </div>
      <button onclick="createApiKey()" class="btn-primary">
        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
        </svg>
        Create New Key
      </button>
    </div>
  </div>
  <div class="card-body">
    <div id="api-keys-list">
      <% if @api_keys.any? %>
        <div class="space-y-3">
          <% @api_keys.each do |api_key| %>
            <div class="list-item bg-secondary-800 rounded-xl border border-secondary-700 hover:border-secondary-600 transition-colors duration-200">
              <div class="flex-1">
                <div class="flex items-center justify-between mb-2">
                  <span class="font-semibold text-secondary-100"><%= api_key.name %></span>
                  <span class="badge badge-primary">Active</span>
                </div>
                <span class="text-sm text-secondary-400 block mb-3">Created: <%= api_key.created_at.strftime('%B %d, %Y') %></span>
                <div class="flex items-center gap-2">
                  <input type="text" id="api-key-<%= api_key.id %>" 
                         value="<%= api_key.api_key_value || '[Key not available - created before this feature]' %>" 
                         class="font-mono text-sm bg-secondary-900 border border-secondary-600 rounded-xl px-3 py-2 flex-1 focus:border-primary-500 focus:ring-2 focus:ring-primary-500 focus:ring-offset-0 transition-all duration-200 text-secondary-300"
                         readonly 
                         style="letter-spacing: 0.05em;"
                         <% if api_key.api_key_value.nil? %>disabled<% end %>>
                  <button onclick="toggleApiKeyVisibility(<%= api_key.id %>)" 
                          class="btn-secondary p-2"
                          <% if api_key.api_key_value.nil? %>disabled title="Key not available"<% end %>>
                    <svg id="eye-icon-<%= api_key.id %>" class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
                      <circle cx="12" cy="12" r="3"></circle>
                    </svg>
                  </button>
                  <button onclick="copyApiKey(<%= api_key.id %>)" 
                          class="btn-secondary p-2"
                          title="Copy to clipboard"
                          <% if api_key.api_key_value.nil? %>disabled<% end %>>
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                    </svg>
                  </button>
                  <button onclick="revokeApiKey(<%= api_key.id %>)" class="btn-error p-2">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                    </svg>
                  </button>
                </div>
              </div>
            </div>
          <% end %>
        </div>
      <% else %>
        <div class="text-center py-12">
          <svg class="w-16 h-16 text-secondary-300 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z"></path>
          </svg>
          <h3 class="text-lg font-medium text-secondary-100 mb-2">No API keys yet</h3>
          <p class="text-secondary-400 mb-4">Create your first API key to get started with the platform</p>
          <button onclick="createApiKey()" class="btn-primary">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
            </svg>
            Create Your First Key
          </button>
        </div>
      <% end %>
    </div>
  </div>
</div>

<!-- API Testing Interface -->
<div class="card shadow-medium mb-8">
  <div class="card-header">
    <div class="flex items-center justify-between">
      <div>
        <h2 class="text-xl font-semibold text-secondary-100">API Testing Interface</h2>
        <p class="text-sm text-secondary-400 mt-1">Test your API endpoints directly from the dashboard</p>
      </div>
      <div class="badge badge-success">
        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
        </svg>
        Live Testing
      </div>
    </div>
  </div>
  <div class="card-body">
    <div class="grid lg:grid-cols-2 gap-8">
      <!-- API Key Input -->
      <div class="space-y-6">
        <div>
          <label class="form-label">API Key</label>
          <input type="text" id="api-key-input" placeholder="Enter your API key" 
                 class="form-input">
          <p class="form-help">Copy an API key from above or create a new one</p>
        </div>

        <!-- Quick Actions -->
        <div class="space-y-4">
          <h3 class="font-semibold text-secondary-100 mb-3">Quick Actions</h3>
          
          <!-- Log Set Form -->
          <div class="border-2 border-success-800 rounded-xl p-4 bg-success-900/20">
            <div class="flex items-center mb-3">
              <div class="w-8 h-8 bg-success-500 rounded-lg flex items-center justify-center mr-3">
                <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                </svg>
              </div>
              <h4 class="font-semibold text-success-300">Log Workout Set</h4>
            </div>
            <div class="grid grid-cols-3 gap-3 mb-3">
              <input type="text" id="exercise" placeholder="Exercise" class="form-input text-sm">
              <input type="number" id="weight" placeholder="Weight" class="form-input text-sm">
              <input type="number" id="reps" placeholder="Reps" class="form-input text-sm">
            </div>
            <button onclick="logSet()" class="btn-success text-sm">
              <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
              </svg>
              Log Set
            </button>
          </div>

          <!-- Get Last Set -->
          <div class="border-2 border-primary-800 rounded-xl p-4 bg-primary-900/20">
            <div class="flex items-center mb-3">
              <div class="w-8 h-8 bg-primary-500 rounded-lg flex items-center justify-center mr-3">
                <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
              </div>
              <h4 class="font-semibold text-primary-300">Get Last Set</h4>
            </div>
            <div class="flex gap-2">
              <input type="text" id="get-exercise" placeholder="Exercise name" class="form-input text-sm flex-1">
              <button onclick="getLastSet()" class="btn-primary text-sm">
                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
                Get Last Set
              </button>
            </div>
          </div>

          <!-- Get Last N Sets -->
          <div class="border-2 border-warning-800 rounded-xl p-4 bg-warning-900/20">
            <div class="flex items-center mb-3">
              <div class="w-8 h-8 bg-warning-500 rounded-lg flex items-center justify-center mr-3">
                <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                </svg>
              </div>
              <h4 class="font-semibold text-warning-300">Get Last N Sets</h4>
            </div>
            <div class="flex gap-2">
              <input type="text" id="get-sets-exercise" placeholder="Exercise" class="form-input text-sm flex-1">
              <input type="number" id="sets-limit" placeholder="Limit" value="5" class="form-input text-sm w-20">
              <button onclick="getLastSets()" class="btn-warning text-sm">
                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                </svg>
                Get Sets
              </button>
            </div>
          </div>

          <!-- Get Recent Sets (All Exercises) -->
          <div class="border-2 border-accent-800 rounded-xl p-4 bg-accent-900/20">
            <div class="flex items-center mb-3">
              <div class="w-8 h-8 bg-accent-500 rounded-lg flex items-center justify-center mr-3">
                <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              <h4 class="font-semibold text-accent-300">Get Recent Sets (All Exercises)</h4>
            </div>
            <div class="flex gap-2">
              <input type="number" id="recent-sets-limit" placeholder="Limit" value="10" class="form-input text-sm w-20">
              <button onclick="getRecentSets()" class="btn-primary text-sm bg-accent-600 hover:bg-accent-700">
                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                Get Recent Sets
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- Results Panel -->
      <div>
        <h3 class="font-semibold text-secondary-100 mb-3">API Response</h3>
        <div id="api-results" class="bg-secondary-800 border-2 border-secondary-700 rounded-xl p-4 min-h-96 overflow-auto">
          <div class="flex items-center justify-center h-full text-secondary-400">
            <div class="text-center">
              <svg class="w-16 h-16 mx-auto mb-4 text-secondary-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
              <p class="text-sm font-medium">API responses will appear here</p>
              <p class="text-xs text-secondary-500 mt-1">Test an endpoint to see the response</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Recent Activity -->
<div class="grid lg:grid-cols-2 gap-8">
  <div class="card shadow-medium">
    <div class="card-header">
      <div class="flex items-center justify-between">
        <h2 class="text-xl font-semibold text-secondary-100">Recent Sets</h2>
        <div class="badge badge-primary"><%= @recent_sets.count %> sets</div>
      </div>
    </div>
    <div class="card-body">
      <% if @recent_sets.any? %>
        <div class="space-y-3">
          <% @recent_sets.each do |set| %>
            <div class="list-item bg-secondary-800 rounded-xl border border-secondary-700">
              <div class="flex items-center">
                <div class="w-10 h-10 bg-gradient-to-r from-success-500 to-success-600 rounded-xl flex items-center justify-center mr-3">
                  <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                  </svg>
                </div>
                <div class="flex-1">
                  <span class="font-medium text-secondary-100"><%= set.exercise.titleize %></span>
                  <div class="text-sm text-secondary-400 mt-1">
                    <span class="inline-flex items-center">
                      <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                      </svg>
                      <%= time_ago_in_words(set.created_at) %> ago
                    </span>
                  </div>
                </div>
                <div class="text-right">
                  <div class="badge badge-success"><%= set.reps %> reps</div>
                  <div class="text-sm text-secondary-400 mt-1"><%= set.weight %> lbs</div>
                </div>
              </div>
            </div>
          <% end %>
        </div>
      <% else %>
        <div class="text-center py-12">
          <svg class="w-16 h-16 text-secondary-300 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
          </svg>
          <h3 class="text-lg font-medium text-secondary-100 mb-2">No sets logged yet</h3>
          <p class="text-secondary-400 mb-4">Start logging your workouts to see your progress here</p>
        </div>
      <% end %>
    </div>
  </div>

  <div class="card shadow-medium">
    <div class="card-header">
      <div class="flex items-center justify-between">
        <h2 class="text-xl font-semibold text-secondary-100">Workout Assignments</h2>
        <div class="badge badge-primary"><%= @workout_assignments.count %> assignments</div>
      </div>
    </div>
    <div class="card-body">
      <% if @workout_assignments.any? %>
        <div class="space-y-3">
          <% @workout_assignments.each do |assignment| %>
            <div class="list-item bg-secondary-800 rounded-xl border border-secondary-700">
              <div class="flex items-center">
                <div class="w-10 h-10 bg-gradient-to-r from-accent-500 to-accent-600 rounded-xl flex items-center justify-center mr-3">
                  <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                  </svg>
                </div>
                <div class="flex-1">
                  <span class="font-medium text-secondary-100"><%= assignment.assignment_name %></span>
                  <% if assignment.scheduled_for %>
                    <div class="text-sm text-secondary-400 mt-1">
                      <span class="inline-flex items-center">
                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        <%= assignment.scheduled_for.strftime('%B %d, %Y at %I:%M %p') %>
                      </span>
                    </div>
                  <% end %>
                </div>
                <div class="badge badge-warning">Scheduled</div>
              </div>
            </div>
          <% end %>
        </div>
      <% else %>
        <div class="text-center py-12">
          <svg class="w-16 h-16 text-secondary-300 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
          </svg>
          <h3 class="text-lg font-medium text-secondary-100 mb-2">No workout assignments yet</h3>
          <p class="text-secondary-400 mb-4">Create workout plans and assignments to track your progress</p>
        </div>
      <% end %>
    </div>
  </div>
</div>

<script>
  async function makeApiCall(endpoint, method = 'GET', body = null) {
    const apiKey = document.getElementById('api-key-input').value;
    if (!apiKey) {
      displayResult({ error: 'Please enter an API key' });
      return;
    }

    const options = {
      method: method,
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json'
      }
    };

    if (body) {
      options.body = JSON.stringify(body);
    }

    try {
      const response = await fetch(endpoint, options);
      const result = await response.json();
      displayResult(result);
    } catch (error) {
      displayResult({ error: error.message });
    }
  }

  function displayResult(result) {
    const resultsDiv = document.getElementById('api-results');
    resultsDiv.innerHTML = `<pre class="text-sm whitespace-pre-wrap">${JSON.stringify(result, null, 2)}</pre>`;
  }

  async function createApiKey() {
    const name = prompt('Enter a name for the API key:');
    if (!name) return;

    try {
      const response = await fetch('/api_keys', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        },
        body: JSON.stringify({ api_key: { name: name } })
      });
      
      const result = await response.json();
      
      if (response.ok && result.success) {
        // Show the API key value and auto-fill the input
        const apiKey = result.api_key.key;
        
        // Auto-fill the API key input field first
        document.getElementById('api-key-input').value = apiKey;
        
        // Show alert with the key value
        alert(`API Key created successfully!\n\nName: ${result.api_key.name}\nAPI Key: ${apiKey}\n\nThe key has been automatically filled in the testing interface below and is now available in your API keys list with show/hide functionality.`);
        
        // Add the new API key to the list without reloading
        const apiKeysList = document.getElementById('api-keys-list');
        const newKeyHtml = `
          <div class="flex justify-between items-center p-3 bg-gray-50 rounded">
            <div class="flex-1">
              <span class="font-medium">${result.api_key.name}</span>
              <span class="text-sm text-gray-500 block">Created: ${new Date(result.api_key.created_at).toISOString().split('T')[0]}</span>
              <div class="mt-2 flex items-center gap-2">
                <input type="password" id="api-key-${result.api_key.id}" 
                       value="${apiKey}" 
                       class="font-mono text-sm bg-white border border-gray-300 rounded px-2 py-1 flex-1"
                       readonly 
                       style="letter-spacing: 0.05em;">
                <button onclick="toggleApiKeyVisibility(${result.api_key.id})" 
                        class="text-gray-500 hover:text-gray-700 p-1 rounded">
                  <svg id="eye-icon-${result.api_key.id}" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"></path>
                    <line x1="1" y1="1" x2="23" y2="23"></line>
                  </svg>
                </button>
                <button onclick="copyApiKey(${result.api_key.id})" 
                        class="text-gray-500 hover:text-gray-700 p-1 rounded"
                        title="Copy to clipboard">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                    <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
                  </svg>
                </button>
              </div>
            </div>
            <button onclick="revokeApiKey(${result.api_key.id})" class="text-red-600 hover:text-red-800 text-sm ml-4">
              Revoke
            </button>
          </div>
        `;
        
        // If there are existing keys, add to the container
        const existingContainer = apiKeysList.querySelector('.space-y-2');
        if (existingContainer) {
          existingContainer.insertAdjacentHTML('beforeend', newKeyHtml);
        } else {
          // Replace the "No API keys" message with the new key
          apiKeysList.innerHTML = `<div class="space-y-2">${newKeyHtml}</div>`;
        }
      } else {
        alert(`Failed to create API key: ${result.message || 'Unknown error'}`);
      }
    } catch (error) {
      alert('Error creating API key: ' + error.message);
    }
  }

  async function revokeApiKey(id) {
    if (!confirm('Are you sure you want to revoke this API key?')) return;

    try {
      const response = await fetch(`/api_keys/${id}/revoke`, {
        method: 'PATCH',
        headers: {
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        }
      });
      
      const result = await response.json();
      
      if (response.ok && result.success) {
        location.reload();
      } else {
        alert(`Failed to revoke API key: ${result.message || 'Unknown error'}`);
      }
    } catch (error) {
      alert('Error revoking API key: ' + error.message);
    }
  }

  function logSet() {
    const exercise = document.getElementById('exercise').value;
    const weight = parseFloat(document.getElementById('weight').value);
    const reps = parseInt(document.getElementById('reps').value);

    if (!exercise || !weight || !reps) {
      alert('Please fill in all fields');
      return;
    }

    makeApiCall('/api/v1/fitness/log_set', 'POST', { exercise, weight, reps });
  }

  function getLastSet() {
    const exercise = document.getElementById('get-exercise').value;
    if (!exercise) {
      alert('Please enter an exercise name');
      return;
    }

    makeApiCall(`/api/v1/fitness/get_last_set?exercise=${encodeURIComponent(exercise)}`);
  }

  function getLastSets() {
    const exercise = document.getElementById('get-sets-exercise').value;
    const limit = document.getElementById('sets-limit').value;
    
    if (!exercise) {
      alert('Please enter an exercise name');
      return;
    }

    makeApiCall(`/api/v1/fitness/get_last_sets?exercise=${encodeURIComponent(exercise)}&limit=${limit}`);
  }

  function getRecentSets() {
    const limit = document.getElementById('recent-sets-limit').value;
    makeApiCall(`/api/v1/fitness/get_recent_sets?limit=${limit}`);
  }

  function toggleApiKeyVisibility(keyId) {
    const input = document.getElementById(`api-key-${keyId}`);
    const eyeIcon = document.getElementById(`eye-icon-${keyId}`);
    
    // Don't toggle if input is disabled
    if (input.disabled) return;
    
    if (input.type === 'password') {
      // Show the key
      input.type = 'text';
      eyeIcon.innerHTML = `
        <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
        <circle cx="12" cy="12" r="3"></circle>
      `;
    } else {
      // Hide the key
      input.type = 'password';
      eyeIcon.innerHTML = `
        <path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"></path>
        <line x1="1" y1="1" x2="23" y2="23"></line>
      `;
    }
  }

  function copyApiKey(keyId) {
    const input = document.getElementById(`api-key-${keyId}`);
    
    // Don't copy if input is disabled
    if (input.disabled) return;
    
    // Temporarily show the key if it's hidden
    const wasHidden = input.type === 'password';
    if (wasHidden) {
      input.type = 'text';
    }
    
    // Copy to clipboard
    input.select();
    input.setSelectionRange(0, 99999); // For mobile devices
    
    try {
      document.execCommand('copy');
      // Show success feedback
      const button = event.target.closest('button');
      const originalTitle = button.title;
      button.title = 'Copied!';
      setTimeout(() => {
        button.title = originalTitle;
      }, 2000);
    } catch (err) {
      console.error('Failed to copy: ', err);
    }
    
    // Hide the key again if it was previously hidden
    if (wasHidden) {
      input.type = 'password';
    }
    
    // Remove selection
    input.blur();
  }

  // Initialize all API keys as hidden on page load
  document.addEventListener('DOMContentLoaded', function() {
    const apiKeyInputs = document.querySelectorAll('[id^="api-key-"]');
    apiKeyInputs.forEach(input => {
      // Only set to password type if not disabled
      if (!input.disabled) {
        input.type = 'password';
      }
    });
  });
</script>