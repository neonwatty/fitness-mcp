<div class="space-y-8">
  <div class="bg-white rounded-lg shadow-md p-6">
    <h1 class="text-2xl font-bold mb-4">Welcome, <%= @user.email %></h1>
    <p class="text-gray-600">Use this dashboard to manage your fitness data and test API endpoints.</p>
  </div>

  <!-- API Keys Section -->
  <div class="bg-white rounded-lg shadow-md p-6">
    <div class="flex justify-between items-center mb-4">
      <h2 class="text-xl font-semibold">API Keys</h2>
      <button onclick="createApiKey()" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md">
        Create New API Key
      </button>
    </div>
    
    <div id="api-keys-list">
      <% if @api_keys.any? %>
        <div class="space-y-2">
          <% @api_keys.each do |api_key| %>
            <div class="flex justify-between items-center p-3 bg-gray-50 rounded">
              <div class="flex-1">
                <span class="font-medium"><%= api_key.name %></span>
                <span class="text-sm text-gray-500 block">Created: <%= api_key.created_at.strftime('%Y-%m-%d') %></span>
                <div class="mt-2 flex items-center gap-2">
                  <input type="text" id="api-key-<%= api_key.id %>" 
                         value="<%= api_key.api_key_value || '[Key not available - created before this feature]' %>" 
                         class="font-mono text-sm bg-white border border-gray-300 rounded px-2 py-1 flex-1"
                         readonly 
                         style="letter-spacing: 0.05em;"
                         <% if api_key.api_key_value.nil? %>disabled<% end %>>
                  <button onclick="toggleApiKeyVisibility(<%= api_key.id %>)" 
                          class="text-gray-500 hover:text-gray-700 p-1 rounded"
                          <% if api_key.api_key_value.nil? %>disabled title="Key not available"<% end %>>
                    <svg id="eye-icon-<%= api_key.id %>" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
                      <circle cx="12" cy="12" r="3"></circle>
                    </svg>
                  </button>
                  <button onclick="copyApiKey(<%= api_key.id %>)" 
                          class="text-gray-500 hover:text-gray-700 p-1 rounded"
                          title="Copy to clipboard"
                          <% if api_key.api_key_value.nil? %>disabled<% end %>>
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                      <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
                    </svg>
                  </button>
                </div>
              </div>
              <button onclick="revokeApiKey(<%= api_key.id %>)" class="text-red-600 hover:text-red-800 text-sm ml-4">
                Revoke
              </button>
            </div>
          <% end %>
        </div>
      <% else %>
        <p class="text-gray-500">No API keys yet. Create one to get started.</p>
      <% end %>
    </div>
  </div>

  <!-- API Testing Interface -->
  <div class="bg-white rounded-lg shadow-md p-6">
    <h2 class="text-xl font-semibold mb-4">API Testing Interface</h2>
    
    <div class="grid lg:grid-cols-2 gap-8">
      <!-- API Key Input -->
      <div class="space-y-4">
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">API Key</label>
          <input type="text" id="api-key-input" placeholder="Enter your API key" 
                 class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
          <p class="text-xs text-gray-500 mt-1">Copy an API key from above or create a new one</p>
        </div>

        <!-- Quick Actions -->
        <div class="space-y-2">
          <h3 class="font-medium">Quick Actions</h3>
          
          <!-- Log Set Form -->
          <div class="border rounded-md p-3">
            <h4 class="font-medium mb-2">Log Workout Set</h4>
            <div class="grid grid-cols-3 gap-2 mb-2">
              <input type="text" id="exercise" placeholder="Exercise" class="px-2 py-1 border rounded text-sm">
              <input type="number" id="weight" placeholder="Weight" class="px-2 py-1 border rounded text-sm">
              <input type="number" id="reps" placeholder="Reps" class="px-2 py-1 border rounded text-sm">
            </div>
            <button onclick="logSet()" class="bg-green-600 hover:bg-green-700 text-white px-3 py-1 rounded text-sm">
              Log Set
            </button>
          </div>

          <!-- Get Last Set -->
          <div class="border rounded-md p-3">
            <h4 class="font-medium mb-2">Get Last Set</h4>
            <div class="flex gap-2">
              <input type="text" id="get-exercise" placeholder="Exercise name" class="flex-1 px-2 py-1 border rounded text-sm">
              <button onclick="getLastSet()" class="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded text-sm">
                Get Last Set
              </button>
            </div>
          </div>

          <!-- Get Last N Sets -->
          <div class="border rounded-md p-3">
            <h4 class="font-medium mb-2">Get Last N Sets</h4>
            <div class="flex gap-2">
              <input type="text" id="get-sets-exercise" placeholder="Exercise" class="flex-1 px-2 py-1 border rounded text-sm">
              <input type="number" id="sets-limit" placeholder="Limit" value="5" class="w-16 px-2 py-1 border rounded text-sm">
              <button onclick="getLastSets()" class="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded text-sm">
                Get Sets
              </button>
            </div>
          </div>

          <!-- Get Recent Sets (All Exercises) -->
          <div class="border rounded-md p-3">
            <h4 class="font-medium mb-2">Get Recent Sets (All Exercises)</h4>
            <div class="flex gap-2">
              <input type="number" id="recent-sets-limit" placeholder="Limit" value="10" class="w-16 px-2 py-1 border rounded text-sm">
              <button onclick="getRecentSets()" class="bg-purple-600 hover:bg-purple-700 text-white px-3 py-1 rounded text-sm" style="background-color: #7c3aed !important; color: white !important; display: block !important; visibility: visible !important; opacity: 1 !important;">
                Get Recent Sets
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- Results Panel -->
      <div>
        <h3 class="font-medium mb-2">API Response</h3>
        <div id="api-results" class="bg-gray-100 p-4 rounded-md min-h-96 overflow-auto">
          <p class="text-gray-500">API responses will appear here...</p>
        </div>
      </div>
    </div>
  </div>

  <!-- Recent Activity -->
  <div class="grid lg:grid-cols-2 gap-8">
    <div class="bg-white rounded-lg shadow-md p-6">
      <h2 class="text-xl font-semibold mb-4">Recent Sets</h2>
      <% if @recent_sets.any? %>
        <div class="space-y-2">
          <% @recent_sets.each do |set| %>
            <div class="flex justify-between items-center p-2 bg-gray-50 rounded">
              <span><%= set.exercise.titleize %></span>
              <span class="text-sm text-gray-600"><%= set.reps %> reps @ <%= set.weight %> lbs</span>
            </div>
          <% end %>
        </div>
      <% else %>
        <p class="text-gray-500">No sets logged yet.</p>
      <% end %>
    </div>

    <div class="bg-white rounded-lg shadow-md p-6">
      <h2 class="text-xl font-semibold mb-4">Workout Assignments</h2>
      <% if @workout_assignments.any? %>
        <div class="space-y-2">
          <% @workout_assignments.each do |assignment| %>
            <div class="p-2 bg-gray-50 rounded">
              <span class="font-medium"><%= assignment.assignment_name %></span>
              <% if assignment.scheduled_for %>
                <span class="text-sm text-gray-600 block">Scheduled: <%= assignment.scheduled_for.strftime('%Y-%m-%d %H:%M') %></span>
              <% end %>
            </div>
          <% end %>
        </div>
      <% else %>
        <p class="text-gray-500">No workout assignments yet.</p>
      <% end %>
    </div>
  </div>
</div>

<script>
  async function makeApiCall(endpoint, method = 'GET', body = null) {
    const apiKey = document.getElementById('api-key-input').value;
    if (!apiKey) {
      displayResult({ error: 'Please enter an API key' });
      return;
    }

    const options = {
      method: method,
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json'
      }
    };

    if (body) {
      options.body = JSON.stringify(body);
    }

    try {
      const response = await fetch(endpoint, options);
      const result = await response.json();
      displayResult(result);
    } catch (error) {
      displayResult({ error: error.message });
    }
  }

  function displayResult(result) {
    const resultsDiv = document.getElementById('api-results');
    resultsDiv.innerHTML = `<pre class="text-sm whitespace-pre-wrap">${JSON.stringify(result, null, 2)}</pre>`;
  }

  async function createApiKey() {
    const name = prompt('Enter a name for the API key:');
    if (!name) return;

    try {
      const response = await fetch('/api_keys', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        },
        body: JSON.stringify({ api_key: { name: name } })
      });
      
      const result = await response.json();
      
      if (response.ok && result.success) {
        // Show the API key value and auto-fill the input
        const apiKey = result.api_key.key;
        
        // Auto-fill the API key input field first
        document.getElementById('api-key-input').value = apiKey;
        
        // Show alert with the key value
        alert(`API Key created successfully!\n\nName: ${result.api_key.name}\nAPI Key: ${apiKey}\n\nThe key has been automatically filled in the testing interface below and is now available in your API keys list with show/hide functionality.`);
        
        // Add the new API key to the list without reloading
        const apiKeysList = document.getElementById('api-keys-list');
        const newKeyHtml = `
          <div class="flex justify-between items-center p-3 bg-gray-50 rounded">
            <div class="flex-1">
              <span class="font-medium">${result.api_key.name}</span>
              <span class="text-sm text-gray-500 block">Created: ${new Date(result.api_key.created_at).toISOString().split('T')[0]}</span>
              <div class="mt-2 flex items-center gap-2">
                <input type="password" id="api-key-${result.api_key.id}" 
                       value="${apiKey}" 
                       class="font-mono text-sm bg-white border border-gray-300 rounded px-2 py-1 flex-1"
                       readonly 
                       style="letter-spacing: 0.05em;">
                <button onclick="toggleApiKeyVisibility(${result.api_key.id})" 
                        class="text-gray-500 hover:text-gray-700 p-1 rounded">
                  <svg id="eye-icon-${result.api_key.id}" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"></path>
                    <line x1="1" y1="1" x2="23" y2="23"></line>
                  </svg>
                </button>
                <button onclick="copyApiKey(${result.api_key.id})" 
                        class="text-gray-500 hover:text-gray-700 p-1 rounded"
                        title="Copy to clipboard">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                    <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
                  </svg>
                </button>
              </div>
            </div>
            <button onclick="revokeApiKey(${result.api_key.id})" class="text-red-600 hover:text-red-800 text-sm ml-4">
              Revoke
            </button>
          </div>
        `;
        
        // If there are existing keys, add to the container
        const existingContainer = apiKeysList.querySelector('.space-y-2');
        if (existingContainer) {
          existingContainer.insertAdjacentHTML('beforeend', newKeyHtml);
        } else {
          // Replace the "No API keys" message with the new key
          apiKeysList.innerHTML = `<div class="space-y-2">${newKeyHtml}</div>`;
        }
      } else {
        alert(`Failed to create API key: ${result.message || 'Unknown error'}`);
      }
    } catch (error) {
      alert('Error creating API key: ' + error.message);
    }
  }

  async function revokeApiKey(id) {
    if (!confirm('Are you sure you want to revoke this API key?')) return;

    try {
      const response = await fetch(`/api_keys/${id}/revoke`, {
        method: 'PATCH',
        headers: {
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        }
      });
      
      const result = await response.json();
      
      if (response.ok && result.success) {
        location.reload();
      } else {
        alert(`Failed to revoke API key: ${result.message || 'Unknown error'}`);
      }
    } catch (error) {
      alert('Error revoking API key: ' + error.message);
    }
  }

  function logSet() {
    const exercise = document.getElementById('exercise').value;
    const weight = parseFloat(document.getElementById('weight').value);
    const reps = parseInt(document.getElementById('reps').value);

    if (!exercise || !weight || !reps) {
      alert('Please fill in all fields');
      return;
    }

    makeApiCall('/api/v1/fitness/log_set', 'POST', { exercise, weight, reps });
  }

  function getLastSet() {
    const exercise = document.getElementById('get-exercise').value;
    if (!exercise) {
      alert('Please enter an exercise name');
      return;
    }

    makeApiCall(`/api/v1/fitness/get_last_set?exercise=${encodeURIComponent(exercise)}`);
  }

  function getLastSets() {
    const exercise = document.getElementById('get-sets-exercise').value;
    const limit = document.getElementById('sets-limit').value;
    
    if (!exercise) {
      alert('Please enter an exercise name');
      return;
    }

    makeApiCall(`/api/v1/fitness/get_last_sets?exercise=${encodeURIComponent(exercise)}&limit=${limit}`);
  }

  function getRecentSets() {
    const limit = document.getElementById('recent-sets-limit').value;
    makeApiCall(`/api/v1/fitness/get_recent_sets?limit=${limit}`);
  }

  function toggleApiKeyVisibility(keyId) {
    const input = document.getElementById(`api-key-${keyId}`);
    const eyeIcon = document.getElementById(`eye-icon-${keyId}`);
    
    // Don't toggle if input is disabled
    if (input.disabled) return;
    
    if (input.type === 'password') {
      // Show the key
      input.type = 'text';
      eyeIcon.innerHTML = `
        <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
        <circle cx="12" cy="12" r="3"></circle>
      `;
    } else {
      // Hide the key
      input.type = 'password';
      eyeIcon.innerHTML = `
        <path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"></path>
        <line x1="1" y1="1" x2="23" y2="23"></line>
      `;
    }
  }

  function copyApiKey(keyId) {
    const input = document.getElementById(`api-key-${keyId}`);
    
    // Don't copy if input is disabled
    if (input.disabled) return;
    
    // Temporarily show the key if it's hidden
    const wasHidden = input.type === 'password';
    if (wasHidden) {
      input.type = 'text';
    }
    
    // Copy to clipboard
    input.select();
    input.setSelectionRange(0, 99999); // For mobile devices
    
    try {
      document.execCommand('copy');
      // Show success feedback
      const button = event.target.closest('button');
      const originalTitle = button.title;
      button.title = 'Copied!';
      setTimeout(() => {
        button.title = originalTitle;
      }, 2000);
    } catch (err) {
      console.error('Failed to copy: ', err);
    }
    
    // Hide the key again if it was previously hidden
    if (wasHidden) {
      input.type = 'password';
    }
    
    // Remove selection
    input.blur();
  }

  // Initialize all API keys as hidden on page load
  document.addEventListener('DOMContentLoaded', function() {
    const apiKeyInputs = document.querySelectorAll('[id^="api-key-"]');
    apiKeyInputs.forEach(input => {
      // Only set to password type if not disabled
      if (!input.disabled) {
        input.type = 'password';
      }
    });
  });
</script>