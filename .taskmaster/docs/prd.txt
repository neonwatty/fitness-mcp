# Overview

The Fitness Model Context Protocol (MCP) server is a personal fitness tracking and planning tool, designed to be accessible via LLMs (like ChatGPT or Claude) through natural language. It enables users to log, query, edit, and plan weightlifting workouts conversationally, from any device, including smartphones. By exposing a structured API, it allows seamless integration with LLM-powered agents that support MCP or OpenAPI-compatible actions.

This product is intended for individual fitness enthusiasts who want to:

* Track lifting progress over time
* Plan and schedule workouts
* Get smarter suggestions based on history
* Use LLMs as workout assistants

# Core Features

## Log a Set

* **What it does**: Allows users to log a completed set (e.g., "12 reps of barbell squat at 135 lbs").
* **Why it's important**: Accurate workout tracking supports progress monitoring and programming.
* **How it works**: A `POST /log_set` endpoint accepts exercise name, weight, reps, and optional timestamp. Data is stored in Amazon Aurora.

## Query Last Set

* **What it does**: Retrieves the most recent set for a given exercise.
* **Why it's important**: Helps users make decisions about today's workout based on prior performance.
* **How it works**: A `GET /get_last_set?exercise=...` endpoint returns the last logged set.

## Delete Last Set

* **What it does**: Allows users to delete the most recent set for a specific exercise.
* **Why it's important**: Provides a way to undo mistakes or correct log errors.
* **How it works**: A `DELETE /delete_last_set?exercise=...` endpoint removes the most recent set.

## Assign Workout

* **What it does**: Enables LLMs or users to generate structured workout plans.
* **Why it's important**: Supports pre-planned training and progression.
* **How it works**: A `POST /assign_workout` endpoint accepts structured JSON of sets/reps/weights to store in the database.

## Schedule Workouts

* **What it does**: Schedules workouts to a specific day/time.
* **Why it's important**: Supports calendar-based planning and reminders.
* **How it works**: The workout assignment includes an optional `scheduled_for` datetime field. Future enhancements may include syncing these assignments with the user's Google Calendar via OAuth and Google Calendar API integration.

# User Experience

## User Personas

* **Self-directed lifters**: Users who track workouts to improve.
* **Coached athletes**: Users following training plans from coaches.
* **Casual lifters**: Users who want lightweight, voice-driven logs.

## Key User Flows

* **Voice-to-log**: User says "I did 12 reps of bench at 155", LLM logs via MCP.
* **History query**: User asks "When did I last squat?", LLM queries API.
* **Workout planning**: LLM creates and suggests new workouts based on recent history.
* **Mobile experience**: All interactions initiated from mobile apps or voice assistants.

## UI/UX Considerations

* Designed for use through LLM interfaces (not traditional UI)
* Responses should be human-readable summaries (e.g., "You last did 3 sets of 10 at 135 lbs on Tuesday.")
* Mobile-first mindset (speed, brevity)

# Technical Architecture

## System Components

* **AWS Lambda**: Serverless functions for each endpoint
* **API Gateway**: HTTP interface exposed to the public
* **Amazon Aurora**: Managed relational database for logging and querying workouts
* **Amazon Cognito** *(planned)*: User identity and authentication management
* **Google Calendar Integration** *(planned)*: Optional future support for syncing scheduled workouts via Google Calendar API
* **OpenAPI Spec**: Defines MCP-compatible endpoints
* **Custom GPT (or other LLM)**: Calls the endpoints based on user prompts

## Data Models

* **User**: `id`, `email`, `api_key` *(placeholder until Cognito implemented)*
* **SetEntry**: `user_id`, `exercise`, `reps`, `weight`, `timestamp`
* **WorkoutAssignment**: `user_id`, `assignment_name`, `scheduled_for`, list of `SetEntry` configs

## APIs

* `POST /log_set`
* `GET /get_last_set?exercise=...`
* `DELETE /delete_last_set?exercise=...`
* `POST /assign_workout`

## Infrastructure

* `serverless.yml` to define Lambda/API Gateway/Aurora resources
* VPC + IAM Roles for Aurora access
* Secrets Manager for DB credentials
* Cognito (not enabled initially, but supported by architecture)

# Development Roadmap

## Phase 1: MVP

* Lambda backend with `log_set`, `get_last_set`
* Aurora DB schema for SetEntry and user\_id
* OpenAPI definition file (`openapi.json`)
* Deploy via Serverless Framework
* Test via cURL + local LLM prompts

## Phase 2: Full CRUD Support

* Add `delete_last_set` and `assign_workout`
* Add workout scheduling logic
* Expand schemas to support progressive weight ranges

## Phase 3: LLM Integration

* Create Custom GPT with uploaded OpenAPI spec
* Natural language flows tested in ChatGPT mobile app

## Phase 4: Insights and Recommendations

* Add endpoints for "suggest next load", "PR tracking", etc.
* Store max-rep performance, training blocks

## Phase 5: Multi-user Cognito Upgrade

* Replace static API key with JWT token validation via Cognito
* Update Lambda middleware to extract `user_id` from `Authorization` header
* Remove dependency on internal API key logic

## Phase 6: Google Calendar Sync (Optional)

* Add OAuth authorization flow for Google Calendar
* Sync scheduled workouts to user’s calendar via Google Calendar API
* Include title, description, and workout metadata in calendar event

# Logical Dependency Chain

1. **Aurora schema and connection test**
2. **Log and retrieve sets via Lambda** (with `user_id` field)
3. **Create and test OpenAPI spec**
4. **Connect LLM via Custom GPT**
5. **Add assign/delete functionality**
6. **Build out planning/scheduling support**
7. **Add insights and smart logic**
8. **Upgrade to Cognito-based multi-user auth**
9. **Optional: Add Google Calendar integration**

# Risks and Mitigations

## Technical Challenges

* **DB cold start times** → Use Aurora Serverless v2 with warm pool
* **Lambda Aurora auth** → Use Secrets Manager and VPC config
* **Future-proofing auth** → Use `user_id` in all tables from the start
* **Google Calendar integration complexity** → Mitigated by treating as optional enhancement with isolated architecture

## MVP Scope Definition

* Ensure log/query/delete flows are fast and stable before planning logic
* Avoid early focus on UI — LLM is the primary interface

## Resource Constraints

* Use Serverless Framework for rapid, affordable deployments
* Avoid complex scheduling early (no cron/trigger dependencies)
* Defer Cognito implementation until user demand increases
* Defer Google Calendar integration until scheduling features are stable

# Appendix

* See `openapi.json` for schema definitions
* Example ChatGPT prompt: "Log 3 sets of 10 barbell squats at 135 lbs."
* DynamoDB considered but rejected for structured querying flexibility
* Cognito will be used for long-term multi-user support, replacing manual API key authentication
* Google Calendar sync is planned as a future enhancement for external scheduling integration
